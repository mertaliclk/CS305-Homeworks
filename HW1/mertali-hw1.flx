%{
    int noLines = 1;
    int lastindex = 0;
    int i,j;
    int flag = 0;
    char value[100];
%}

tGET        \"Get\"
tSET        \"Set\"
tFUNCTION   \"Function\"
tPRINT      \"Print\"
tFOR        \"For\"
tIF         \"If\"
tRETURN     \"Return\"

tCOMMA      ","
tPLUS       \"[+]\"
tMUL        \"[*]\"
tINC        \"[+][+]\"
tLBRAC      "["
tGT         \"[>]\"
tGEQ        \"[>][=]\"
tEQUALITY   \"[=][=]\"
tMINUS      \"[-]\"
tDIV        \"[/]\"
tDEC        \"[-][-]\"
tRBRAC      "]"
tLT         \"[<]\"
tLEQ        \"[<][=]\"

tIDENT      \"[a-zA-Z_][a-zA-Z0-9_]*\"
tNUM        -?[0-9]+"."[0-9]+
tSTRING     '[^']*'

%%

\n          noLines++;
{tGET}      printf("%d tGET\n", noLines);
{tSET}      printf("%d tSET\n", noLines);
{tFUNCTION} printf("%d tFUNCTION\n", noLines);
{tPRINT}    printf("%d tPRINT\n", noLines);
{tFOR}      printf("%d tFOR\n", noLines);
{tIF}       printf("%d tIF\n", noLines);
{tRETURN}   printf("%d tRETURN\n", noLines);

{tCOMMA}    printf("%d tCOMMA\n", noLines);
{tPLUS}     printf("%d tPLUS\n", noLines);
{tMUL}      printf("%d tMUL\n", noLines);
{tINC}      printf("%d tINC\n", noLines);
{tLBRAC}    printf("%d tLBRAC\n", noLines);
{tGT}       printf("%d tGT\n", noLines);
{tGEQ}      printf("%d tGEQ\n", noLines);
{tEQUALITY} printf("%d tEQUALITY\n", noLines);
{tMINUS}    printf("%d tMINUS\n", noLines);
{tDIV}      printf("%d tDIV\n", noLines);
{tDEC}      printf("%d tDEC\n", noLines);
{tRBRAC}    printf("%d tRBRAC\n", noLines);
{tLT}       printf("%d tLT\n", noLines);
{tLEQ}      printf("%d tLEQ\n", noLines);

{tIDENT}    {
    char *tIDE = yytext+1; 
    tIDE[strlen(tIDE)-1] = '\0'; 
    printf("%d tIDENT (%s)\n", noLines, tIDE);
}
{tNUM}      {
    for(i=0;i<sizeof(value);i++) {value[i] = '\0';}
    for(i=yyleng-1;i>0;i--){
        if(yytext[i]=='.'){
            lastindex = i+1;
            i=0;
        }
        else if(yytext[i]!='0'){
            lastindex = i;
            i=0;
        }
    }
    for(i=0,j=0;i<yyleng;i++){
        if(flag==0){
            if(yytext[i]=='-'){
                value[j]='-';
                j++;
            }
            else if(yytext[i]=='.'){
                value[j]=yytext[i-1];
                j++;
                value[j]=yytext[i];
                j++;
                i++;
                flag=1;
            }
            else if(yytext[i]!= '0')
            {
                while(yytext[i]!='.'){
                    value[j]=yytext[i];
                    j++;
                    i++;
                }
                flag=1;
                value[j]=yytext[i];
                j++; 
                i++;             
            }
        }
        if(flag==1){
            while(i<lastindex){
                value[j]=yytext[i];
                j++;
                i++;
            }
            value[j]=yytext[i];
            j++;
            i++;
            flag=0;
            break;
            REJECT;
        }
    }
    printf("%d tNUM (%s) (%s)\n", noLines, yytext, value);
}
-?[0-9]+    {
    for(i=0;i<sizeof(value);i++) {value[i] = '\0';}
    int power=0;
    for(i=0,j=0;i<yyleng;i++){
        if(yytext[i]=='-'){
            value[j]='-';
            j++;
        }
        else if(yytext[i]!='0'){
            while(i<yyleng){
                value[j]=yytext[i];
                j++;
                i++;
            }
            power=1;
            break;
            REJECT;
        }    
    }
    if(power==0){
        value[j]='0';
    }
    printf("%d tNUM (%s) (%s)\n", noLines, yytext, value);    
}
{tSTRING}   {
    char *tSTR = yytext+1; 
    tSTR[strlen(tSTR)-1] = '\0'; 
    printf("%d tSTRING (%s)\n", noLines, tSTR);
    for(i=0;i<yyleng;i++){
        if(yytext[i]=='\n'){
            noLines++;
        }
    }
}
[\t]        ;
" "         ;
.           printf("%d ILLEGAL CHARACTER (%s)\n", noLines, yytext);

%%
int main() {
    yylex();
    return(0);
}